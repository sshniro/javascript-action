'@version': 2.8.0
'@generated': 'Mon, 9 Mar 2020 17:55:03'
site:
  - '@name': 'http://www.example.com'
    '@host': www.example.com
    '@port': '80'
    '@ssl': 'false'
    alerts:
      - pluginid: '10038'
        alert: Content Security Policy (CSP) Header Not Set
        name: Content Security Policy (CSP) Header Not Set
        riskcode: '1'
        confidence: '2'
        riskdesc: Low (Medium)
        desc: >-
          <p>Content Security Policy (CSP) is an added layer of security that
          helps to detect and mitigate certain types of attacks, including Cross
          Site Scripting (XSS) and data injection attacks. These attacks are
          used for everything from data theft to site defacement or distribution
          of malware. CSP provides a set of standard HTTP headers that allow
          website owners to declare approved sources of content that browsers
          should be allowed to load on that page â€” covered types are JavaScript,
          CSS, HTML frames, fonts, images and embeddable objects such as Java
          applets, ActiveX, audio and video files.</p>
        instances:
          - uri: 'http://www.example.com/robots.txt'
            method: GET
          - uri: 'http://www.example.com/sitemap.xml'
            method: GET
          - uri: 'http://www.example.com/'
            method: GET
        count: '3'
        solution: >-
          <p>Ensure that your web server, application server, load balancer,
          etc. is configured to set the Content-Security-Policy header, to
          achieve optimal browser support: "Content-Security-Policy" for Chrome
          25+, Firefox 23+ and Safari 7+, "X-Content-Security-Policy" for
          Firefox 4.0+ and Internet Explorer 10+, and "X-WebKit-CSP" for Chrome
          14+ and Safari 6+.</p>
        reference: >-
          <p>https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy</p><p>https://www.owasp.org/index.php/Content_Security_Policy</p><p>http://www.w3.org/TR/CSP/</p><p>http://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html</p><p>http://www.html5rocks.com/en/tutorials/security/content-security-policy/</p><p>http://caniuse.com/#feat=contentsecuritypolicy</p><p>http://content-security-policy.com/</p>
        cweid: '16'
        wascid: '15'
        sourceid: '3'
      - pluginid: '10016'
        alert: Web Browser XSS Protection Not Enabled
        name: Web Browser XSS Protection Not Enabled
        riskcode: '1'
        confidence: '2'
        riskdesc: Low (Medium)
        desc: >-
          <p>Web Browser XSS Protection is not enabled, or is disabled by the
          configuration of the 'X-XSS-Protection' HTTP response header on the
          web server</p>
        instances:
          - uri: 'http://www.example.com/'
            method: GET
            param: X-XSS-Protection
          - uri: 'http://www.example.com/sitemap.xml'
            method: GET
            param: X-XSS-Protection
          - uri: 'http://www.example.com/robots.txt'
            method: GET
            param: X-XSS-Protection
        count: '3'
        solution: >-
          <p>Ensure that the web browser's XSS filter is enabled, by setting the
          X-XSS-Protection HTTP response header to '1'.</p>
        otherinfo: >-
          <p>The X-XSS-Protection HTTP response header allows the web server to
          enable or disable the web browser's XSS protection mechanism. The
          following values would attempt to enable it: </p><p>X-XSS-Protection:
          1; mode=block</p><p>X-XSS-Protection: 1;
          report=http://www.example.com/xss</p><p>The following values would
          disable it:</p><p>X-XSS-Protection: 0</p><p>The X-XSS-Protection HTTP
          response header is currently supported on Internet Explorer, Chrome
          and Safari (WebKit).</p><p>Note that this alert is only raised if the
          response body could potentially contain an XSS payload (with a
          text-based content type, with a non-zero length).</p>
        reference: >-
          <p>https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet</p><p>https://www.veracode.com/blog/2014/03/guidelines-for-setting-security-headers/</p>
        cweid: '933'
        wascid: '14'
        sourceid: '3'
      - pluginid: '10036'
        alert: >-
          Server Leaks Version Information via "Server" HTTP Response Header
          Field
        name: >-
          Server Leaks Version Information via "Server" HTTP Response Header
          Field
        riskcode: '1'
        confidence: '3'
        riskdesc: Low (High)
        desc: >-
          <p>The web/application server is leaking version information via the
          "Server" HTTP response header. Access to such information may
          facilitate attackers identifying other vulnerabilities your
          web/application server is subject to.</p>
        instances:
          - uri: 'http://www.example.com/sitemap.xml'
            method: GET
            evidence: ECS (dcb/7F18)
          - uri: 'http://www.example.com/'
            method: GET
            evidence: ECS (dcb/7FA7)
          - uri: 'http://www.example.com/robots.txt'
            method: GET
            evidence: ECS (dcb/7F60)
          - uri: 'http://www.example.com/'
            method: GET
            evidence: ECS (dcb/7F5E)
        count: '4'
        solution: >-
          <p>Ensure that your web server, application server, load balancer,
          etc. is configured to suppress the "Server" header or provide generic
          details.</p>
        reference: >-
          <p>http://httpd.apache.org/docs/current/mod/core.html#servertokens</p><p>http://msdn.microsoft.com/en-us/library/ff648552.aspx#ht_urlscan_007</p><p>http://blogs.msdn.com/b/varunm/archive/2013/04/23/remove-unwanted-http-response-headers.aspx</p><p>http://www.troyhunt.com/2012/02/shhh-dont-let-your-response-headers.html</p>
        cweid: '200'
        wascid: '13'
        sourceid: '3'
      - pluginid: '10050'
        alert: Retrieved from Cache
        name: Retrieved from Cache
        riskcode: '0'
        confidence: '2'
        riskdesc: Informational (Medium)
        desc: >-
          <p>The content was retrieved from a shared cache. If the response data
          is sensitive, personal or user-specific, this may result in sensitive
          information being leaked. In some cases, this may even result in a
          user gaining complete control of the session of another user,
          depending on the configuration of the caching components in use in
          their environment. This is primarily an issue where caching servers
          such as "proxy" caches are configured on the local network. This
          configuration is typically found in corporate or educational
          environments, for instance. </p>
        instances:
          - uri: 'http://www.example.com/'
            method: GET
            evidence: HIT
          - uri: 'http://www.example.com/robots.txt'
            method: GET
            evidence: 'Age: 324270'
          - uri: 'http://www.example.com/sitemap.xml'
            method: GET
            evidence: 'Age: 221512'
        count: '3'
        solution: >-
          <p>Validate that the response does not contain sensitive, personal or
          user-specific information.  If it does, consider the use of the
          following HTTP response headers, to limit, or prevent the content
          being stored and retrieved from the cache by another
          user:</p><p>Cache-Control: no-cache, no-store, must-revalidate,
          private</p><p>Pragma: no-cache</p><p>Expires: 0</p><p>This
          configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching
          servers to not store the response, and to not retrieve the response
          (without validation) from the cache, in response to a similar
          request.</p>
        reference: >-
          <p>https://tools.ietf.org/html/rfc7234</p><p>https://tools.ietf.org/html/rfc7231</p><p>http://www.w3.org/Protocols/rfc2616/rfc2616-sec13.html
          (obsoleted by rfc7234)</p>
        sourceid: '3'
      - pluginid: '10020'
        alert: X-Frame-Options Header Not Set
        name: X-Frame-Options Header Not Set
        riskcode: '2'
        confidence: '2'
        riskdesc: Medium (Medium)
        desc: >-
          <p>X-Frame-Options header is not included in the HTTP response to
          protect against 'ClickJacking' attacks.</p>
        instances:
          - uri: 'http://www.example.com/'
            method: GET
            param: X-Frame-Options
        count: '1'
        solution: >-
          <p>Most modern Web browsers support the X-Frame-Options HTTP header.
          Ensure it's set on all web pages returned by your site (if you expect
          the page to be framed only by pages on your server (e.g. it's part of
          a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never
          expect the page to be framed, you should use DENY. ALLOW-FROM allows
          specific websites to frame the web page in supported web
          browsers).</p>
        reference: >-
          <p>http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx</p>
        cweid: '16'
        wascid: '15'
        sourceid: '3'
      - pluginid: '10021'
        alert: X-Content-Type-Options Header Missing
        name: X-Content-Type-Options Header Missing
        riskcode: '1'
        confidence: '2'
        riskdesc: Low (Medium)
        desc: >-
          <p>The Anti-MIME-Sniffing header X-Content-Type-Options was not set to
          'nosniff'. This allows older versions of Internet Explorer and Chrome
          to perform MIME-sniffing on the response body, potentially causing the
          response body to be interpreted and displayed as a content type other
          than the declared content type. Current (early 2014) and legacy
          versions of Firefox will use the declared content type (if one is
          set), rather than performing MIME-sniffing.</p>
        instances:
          - uri: 'http://www.example.com/'
            method: GET
            param: X-Content-Type-Options
        count: '1'
        solution: >-
          <p>Ensure that the application/web server sets the Content-Type header
          appropriately, and that it sets the X-Content-Type-Options header to
          'nosniff' for all web pages.</p><p>If possible, ensure that the end
          user uses a standards-compliant and modern web browser that does not
          perform MIME-sniffing at all, or that can be directed by the web
          application/web server to not perform MIME-sniffing.</p>
        otherinfo: >-
          <p>This issue still applies to error type pages (401, 403, 500, etc.)
          as those pages are often still affected by injection issues, in which
          case there is still concern for browsers sniffing pages away from
          their actual content type.</p><p>At "High" threshold this scanner will
          not alert on client or server error responses.</p>
        reference: >-
          <p>http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx</p><p>https://www.owasp.org/index.php/List_of_useful_HTTP_headers</p>
        cweid: '16'
        wascid: '15'
        sourceid: '3'
